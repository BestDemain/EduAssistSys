[{"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\index.js":"1","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\App.js":"2","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\components\\AppHeader.js":"3","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\components\\AppSider.js":"4","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\KnowledgeAnalysis.js":"5","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\BehaviorAnalysis.js":"6","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\Dashboard.js":"7","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\DifficultyAnalysis.js":"8","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\ReportGenerator.js":"9","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\NLPInteraction.js":"10"},{"size":359,"mtime":1745595494084,"results":"11","hashOfConfig":"12"},{"size":1948,"mtime":1746579537810,"results":"13","hashOfConfig":"12"},{"size":602,"mtime":1745595494083,"results":"14","hashOfConfig":"12"},{"size":1996,"mtime":1745595494083,"results":"15","hashOfConfig":"12"},{"size":10547,"mtime":1745595494085,"results":"16","hashOfConfig":"12"},{"size":15179,"mtime":1746584838107,"results":"17","hashOfConfig":"12"},{"size":9516,"mtime":1745595535744,"results":"18","hashOfConfig":"12"},{"size":11060,"mtime":1746585498824,"results":"19","hashOfConfig":"12"},{"size":18496,"mtime":1746593586183,"results":"20","hashOfConfig":"12"},{"size":7207,"mtime":1746593586134,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"gm7nzx",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\index.js",[],["47","48"],"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\App.js",[],"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\components\\AppHeader.js",[],"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\components\\AppSider.js",[],"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\KnowledgeAnalysis.js",[],"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\BehaviorAnalysis.js",["49"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, Select, Button, Table, Spin, Alert, Typography, Divider, Tag } from 'antd';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport axios from 'axios';\r\nimport { Statistic } from 'antd';\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst BehaviorAnalysis = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [students, setStudents] = useState([]);\r\n  const [selectedStudent, setSelectedStudent] = useState(null);\r\n  const [behaviorData, setBehaviorData] = useState(null);\r\n  \r\n  // 加载学生数据\r\n  useEffect(() => {\r\n    const fetchStudents = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.get('/api/students');\r\n        setStudents(response.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('加载学生数据失败:', err);\r\n        setError('加载学生数据失败，请稍后重试');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchStudents();\r\n  }, []);\r\n  \r\n  // 分析学习行为\r\n  const analyzeBehavior = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const url = selectedStudent \r\n        ? `/api/analysis/behavior?student_id=${selectedStudent}` \r\n        : '/api/analysis/behavior';\r\n      \r\n      const response = await axios.get(url);\r\n      \r\n      if (response.data.status === 'success') {\r\n        setBehaviorData(response.data.behavior_profile);\r\n      } else {\r\n        setError(response.data.message || '分析失败');\r\n      }\r\n      \r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('学习行为分析失败:', err);\r\n      setError('学习行为分析失败，请稍后重试');\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 生成答题时间分布图表配置\r\n  const getHourDistributionOption = () => {\r\n    if (!behaviorData || !behaviorData.peak_hours) return {};\r\n    \r\n    const hours = behaviorData.peak_hours.map(item => item.hour);\r\n    const counts = behaviorData.peak_hours.map(item => item.count);\r\n    \r\n    return {\r\n      title: {\r\n        text: '答题时间分布',\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: hours,\r\n        name: '小时'\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '提交次数'\r\n      },\r\n      series: [\r\n        {\r\n          name: '提交次数',\r\n          type: 'bar',\r\n          data: counts,\r\n          itemStyle: {\r\n            color: '#1890ff'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  // 生成答题状态分布图表配置\r\n  const getStateDistributionOption = () => {\r\n    if (!behaviorData || !behaviorData.state_distribution) return {};\r\n    \r\n    const stateData = Object.entries(behaviorData.state_distribution).map(([key, value]) => ({\r\n      name: key,\r\n      value: value\r\n    }));\r\n    \r\n    return {\r\n      title: {\r\n        text: '答题状态分布',\r\n        left: 'center',\r\n        top: 10,\r\n        textStyle: {\r\n          fontSize: 14\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n      },\r\n      legend: {\r\n        type: 'scroll',\r\n        orient: 'horizontal',\r\n        bottom: 10,\r\n        left: 'center',\r\n        data: stateData.map(item => item.name)\r\n      },\r\n      series: [\r\n        {\r\n          name: '答题状态',\r\n          type: 'pie',\r\n          radius: ['30%', '55%'],\r\n          center: ['50%', '45%'],\r\n          avoidLabelOverlap: true,\r\n          itemStyle: {\r\n            borderRadius: 4\r\n          },\r\n          label: {\r\n            show: false\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              show: true,\r\n              fontSize: 12,\r\n              fontWeight: 'bold'\r\n            }\r\n          },\r\n          labelLine: {\r\n            show: false\r\n          },\r\n          data: stateData\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  // 生成方法使用分布图表配置\r\n  const getMethodDistributionOption = () => {\r\n    if (!behaviorData || !behaviorData.method_distribution) return {};\r\n    \r\n    const methodData = Object.entries(behaviorData.method_distribution).map(([key, value]) => ({\r\n      name: key,\r\n      value: value\r\n    }));\r\n    \r\n    return {\r\n      title: {\r\n        text: '解题方法分布',\r\n        left: 'center',\r\n        top: 10,\r\n        textStyle: {\r\n          fontSize: 14\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n      },\r\n      legend: {\r\n        type: 'scroll',\r\n        orient: 'horizontal',\r\n        bottom: 10,\r\n        left: 'center',\r\n        data: methodData.map(item => item.name)\r\n      },\r\n      series: [\r\n        {\r\n          name: '解题方法',\r\n          type: 'pie',\r\n          radius: ['30%', '55%'],\r\n          center: ['50%', '45%'],\r\n          avoidLabelOverlap: true,\r\n          itemStyle: {\r\n            borderRadius: 4\r\n          },\r\n          label: {\r\n            show: false\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              show: true,\r\n              fontSize: 12,\r\n              fontWeight: 'bold'\r\n            }\r\n          },\r\n          labelLine: {\r\n            show: false\r\n          },\r\n          data: methodData\r\n        }\r\n      ]\r\n    };\r\n\r\n  };\r\n  \r\n  // 生成周内答题分布图表配置\r\n  const getWeekdayDistributionOption = () => {\r\n    if (!behaviorData) return {};\r\n    \r\n    // 模拟周内分布数据（实际应从API获取）\r\n    const weekdays = ['周一', '周二', '周三', '周四', '周五', '周六', '周日'];\r\n    const weekdayData = weekdays.map((day, index) => ({\r\n      name: day,\r\n      value: Math.floor(Math.random() * 100) + 20 // 模拟数据\r\n    }));\r\n    \r\n    return {\r\n      title: {\r\n        text: '周内答题分布',\r\n        left: 'center',\r\n        top: 10,\r\n        textStyle: {\r\n          fontSize: 14\r\n        }\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        }\r\n      },\r\n      grid: {\r\n        top: '15%',\r\n        left: '3%',\r\n        right: '4%',\r\n        bottom: '15%',\r\n        containLabel: true\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: weekdays,\r\n        axisLabel: {\r\n          interval: 0,\r\n          fontSize: 12\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '提交次数'\r\n      },\r\n      series: [\r\n        {\r\n          name: '提交次数',\r\n          type: 'bar',\r\n          data: weekdayData.map(item => item.value),\r\n          itemStyle: {\r\n            color: '#52c41a'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  // 获取学习行为特征标签\r\n  const getBehaviorTags = () => {\r\n    if (!behaviorData) return [];\r\n    \r\n    const tags = [];\r\n    \r\n    // 根据正确率添加标签\r\n    if (behaviorData.correct_rate > 0.8) {\r\n      tags.push({ color: 'green', text: '高正确率' });\r\n    } else if (behaviorData.correct_rate < 0.5) {\r\n      tags.push({ color: 'red', text: '低正确率' });\r\n    }\r\n    \r\n    // 根据答题时间添加标签\r\n    const peakHour = behaviorData.peak_hours && behaviorData.peak_hours[0];\r\n    if (peakHour) {\r\n      const hour = peakHour.hour;\r\n      if (hour >= 22 || hour <= 5) {\r\n        tags.push({ color: 'purple', text: '夜间答题' });\r\n      } else if (hour >= 9 && hour <= 17) {\r\n        tags.push({ color: 'blue', text: '工作时间答题' });\r\n      }\r\n    }\r\n    \r\n    // 根据平均用时添加标签\r\n    if (behaviorData.avg_time_consume < 2) {\r\n      tags.push({ color: 'green', text: '答题速度快' });\r\n    } else if (behaviorData.avg_time_consume > 5) {\r\n      tags.push({ color: 'orange', text: '答题速度慢' });\r\n    }\r\n    \r\n    // 如果有相对表现数据，添加相应标签\r\n    if (behaviorData.relative_performance) {\r\n      if (behaviorData.relative_performance.correct_rate_vs_avg > 0.1) {\r\n        tags.push({ color: 'green', text: '正确率高于平均' });\r\n      } else if (behaviorData.relative_performance.correct_rate_vs_avg < -0.1) {\r\n        tags.push({ color: 'red', text: '正确率低于平均' });\r\n      }\r\n      \r\n      if (behaviorData.relative_performance.time_consume_vs_avg < -0.5) {\r\n        tags.push({ color: 'green', text: '答题速度快于平均' });\r\n      } else if (behaviorData.relative_performance.time_consume_vs_avg > 0.5) {\r\n        tags.push({ color: 'orange', text: '答题速度慢于平均' });\r\n      }\r\n    }\r\n    \r\n    return tags;\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <Title level={2}>学习行为分析</Title>\r\n      <Paragraph>\r\n        本模块结合学习者的特征挖掘个性化学习行为模式，从多角度设计并展示学习者画像，如答题高峰时段、偏好题型、正确答题率等。\r\n      </Paragraph>\r\n      \r\n      <Card className=\"filter-form\">\r\n        <Row gutter={16} align=\"middle\">\r\n          <Col xs={24} sm={12} md={8} lg={6}>\r\n            <Select\r\n              placeholder=\"选择学生\"\r\n              style={{ width: '100%' }}\r\n              allowClear\r\n              onChange={setSelectedStudent}\r\n              loading={loading}\r\n            >\r\n              {students.map(student => (\r\n                <Option key={student.student_ID} value={student.student_ID}>\r\n                  {student.student_ID} {student.sex ? `(${student.sex})` : ''}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Col>\r\n          <Col xs={24} sm={12} md={8} lg={6} style={{ marginTop: { xs: '10px', sm: '0' } }}>\r\n            <Button type=\"primary\" onClick={analyzeBehavior} loading={loading}>\r\n              分析\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n      \r\n      {error && <Alert message=\"错误\" description={error} type=\"error\" showIcon style={{ marginBottom: 16 }} />}\r\n      \r\n      {loading ? (\r\n        <Spin tip=\"分析中...\" size=\"large\" style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }} />\r\n      ) : behaviorData ? (\r\n        <>\r\n          <Card style={{ marginBottom: 16 }}>\r\n            <Row gutter={16}>\r\n              <Col xs={24} md={12}>\r\n                <Statistic title=\"总提交次数\" value={behaviorData.total_submissions} />\r\n              </Col>\r\n              <Col xs={24} md={12}>\r\n                <Statistic \r\n                  title=\"正确率\" \r\n                  value={behaviorData.correct_rate} \r\n                  precision={2} \r\n                  formatter={(value) => `${(value * 100).toFixed(2)}%`} \r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={16} style={{ marginTop: 16 }}>\r\n              <Col xs={24} md={12}>\r\n                <Statistic title=\"平均答题时间\" value={behaviorData.avg_time_consume.toFixed(2)} suffix=\"秒\" />\r\n              </Col>\r\n              <Col xs={24} md={12}>\r\n                <Statistic title=\"平均内存使用\" value={behaviorData.avg_memory ? behaviorData.avg_memory.toFixed(2) : 'N/A'} />\r\n              </Col>\r\n            </Row>\r\n            \r\n            {/* 学习者特征标签 */}\r\n            <Divider orientation=\"left\">学习者特征</Divider>\r\n            <div>\r\n              {getBehaviorTags().map((tag, index) => (\r\n                <Tag color={tag.color} key={index} style={{ margin: '5px' }}>\r\n                  {tag.text}\r\n                </Tag>\r\n              ))}\r\n            </div>\r\n            \r\n            {/* 相对表现 */}\r\n            {behaviorData.relative_performance && (\r\n              <>\r\n                <Divider orientation=\"left\">相对表现（与平均水平比较）</Divider>\r\n                <Row gutter={16}>\r\n                  <Col xs={24} md={12}>\r\n                    <Statistic \r\n                      title=\"正确率对比\" \r\n                      value={behaviorData.relative_performance.correct_rate_vs_avg} \r\n                      precision={2} \r\n                      formatter={(value) => `${(value * 100).toFixed(2)}%`} \r\n                      valueStyle={{ color: behaviorData.relative_performance.correct_rate_vs_avg >= 0 ? '#3f8600' : '#cf1322' }}\r\n                      prefix={behaviorData.relative_performance.correct_rate_vs_avg >= 0 ? <ArrowUpOutlined /> : <ArrowDownOutlined />}\r\n                    />\r\n                  </Col>\r\n                  <Col xs={24} md={12}>\r\n                    <Statistic \r\n                      title=\"答题时间对比\" \r\n                      value={behaviorData.relative_performance.time_consume_vs_avg.toFixed(2)} \r\n                      suffix=\"秒\" \r\n                      valueStyle={{ color: behaviorData.relative_performance.time_consume_vs_avg <= 0 ? '#3f8600' : '#cf1322' }}\r\n                      prefix={behaviorData.relative_performance.time_consume_vs_avg <= 0 ? <ArrowDownOutlined /> : <ArrowUpOutlined />}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n          </Card>\r\n          \r\n          <Row gutter={16}>\r\n            <Col xs={24} md={12}>\r\n              <Card className=\"chart-card\" title=\"答题时间分布\" style={{ marginBottom: 16, height: '420px' }}>\r\n                <ReactECharts\r\n                  option={getHourDistributionOption()}\r\n                  style={{ height: '350px', width: '100%' }}\r\n                  className=\"chart-container\"\r\n                />\r\n              </Card>\r\n            </Col>\r\n            <Col xs={24} md={12}>\r\n              <Card className=\"chart-card\" title=\"答题状态分布\" style={{ marginBottom: 16, height: '420px' }}>\r\n                <ReactECharts\r\n                  option={getStateDistributionOption()}\r\n                  style={{ height: '350px', width: '100%' }}\r\n                  className=\"chart-container\"\r\n                />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          \r\n          <Row gutter={16} style={{ marginTop: 16 }}>\r\n            <Col xs={24} md={12}>\r\n              <Card className=\"chart-card\" title=\"解题方法分布\" style={{ marginBottom: 16, height: '460px' }}>\r\n                <ReactECharts\r\n                  option={getMethodDistributionOption()}\r\n                  style={{ height: '390px', width: '100%' }}\r\n                  className=\"chart-container\"\r\n                />\r\n              </Card>\r\n            </Col>\r\n            <Col xs={24} md={12}>\r\n              <Card className=\"chart-card\" title=\"周内答题分布\" style={{ marginBottom: 16, height: '460px' }}>\r\n                <ReactECharts\r\n                  option={getWeekdayDistributionOption()}\r\n                  style={{ height: '390px', width: '100%' }}\r\n                  className=\"chart-container\"\r\n                />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BehaviorAnalysis;","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\Dashboard.js",["50"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, Statistic, Spin, Alert } from 'antd';\r\nimport { UserOutlined, BookOutlined, FileTextOutlined, CheckCircleOutlined } from '@ant-design/icons';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [stats, setStats] = useState({\r\n    totalStudents: 0,\r\n    totalQuestions: 0,\r\n    totalSubmissions: 0,\r\n    correctRate: 0\r\n  });\r\n  \r\n  // 知识点掌握度数据\r\n  const [knowledgeMastery, setKnowledgeMastery] = useState([]);\r\n  \r\n  // 学习行为数据\r\n  const [behaviorData, setBehaviorData] = useState({\r\n    hourDistribution: [],\r\n    stateDistribution: []\r\n  });\r\n  \r\n  useEffect(() => {\r\n    // 加载仪表盘数据\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // 获取学生数据\r\n        const studentsResponse = await axios.get('/api/students');\r\n        \r\n        // 获取题目数据\r\n        const questionsResponse = await axios.get('/api/questions');\r\n        \r\n        // 获取提交记录数据\r\n        const submissionsResponse = await axios.get('/api/submissions');\r\n        \r\n        // 计算正确率\r\n        const submissions = submissionsResponse.data;\r\n        const correctSubmissions = submissions.filter(s => s.state === 'Absolutely_Correct').length;\r\n        const correctRate = submissions.length > 0 ? correctSubmissions / submissions.length : 0;\r\n        \r\n        // 更新统计数据\r\n        setStats({\r\n          totalStudents: studentsResponse.data.length,\r\n          totalQuestions: questionsResponse.data.length,\r\n          totalSubmissions: submissions.length,\r\n          correctRate: correctRate\r\n        });\r\n        \r\n        // 获取知识点掌握度分析数据\r\n        const knowledgeResponse = await axios.get('/api/analysis/knowledge');\r\n        if (knowledgeResponse.data.status === 'success') {\r\n          const knowledgeData = knowledgeResponse.data.knowledge_mastery;\r\n          const knowledgeArray = Object.entries(knowledgeData).map(([key, value]) => ({\r\n            name: key,\r\n            value: (value.correct_rate * 100).toFixed(2)\r\n          }));\r\n          setKnowledgeMastery(knowledgeArray);\r\n        }\r\n        \r\n        // 获取学习行为分析数据\r\n        const behaviorResponse = await axios.get('/api/analysis/behavior');\r\n        if (behaviorResponse.data.status === 'success') {\r\n          const behaviorProfile = behaviorResponse.data.behavior_profile;\r\n          \r\n          // 处理小时分布数据\r\n          const hourData = behaviorProfile.peak_hours.map(item => ({\r\n            hour: item.hour,\r\n            count: item.count\r\n          }));\r\n          \r\n          // 处理状态分布数据\r\n          const stateData = Object.entries(behaviorProfile.state_distribution).filter(([key, value]) => !key.match(/[^\\x00-\\x7F]/)).map(([key, value]) => ({\r\n            name: key,\r\n            value: value\r\n          }));\r\n          \r\n          setBehaviorData({\r\n            hourDistribution: hourData,\r\n            stateDistribution: stateData\r\n          });\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('加载仪表盘数据失败:', err);\r\n        setError('加载数据失败，请稍后重试');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchDashboardData();\r\n  }, []);\r\n  \r\n  // 知识点掌握度图表配置\r\n  const getKnowledgeChartOption = () => {\r\n    const names = knowledgeMastery.map(item => item.name);\r\n    const values = knowledgeMastery.map(item => parseFloat(item.value));\r\n    return {\r\n      title: {\r\n        text: '知识点掌握度分布',\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: names,\r\n        name: '知识点'\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '掌握度 (%)'\r\n      },\r\n      series: [\r\n        {\r\n          name: '掌握度',\r\n          type: 'bar',\r\n          data: values,\r\n          itemStyle: {\r\n            color: '#1890ff'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  // 学习行为图表配置 - 小时分布\r\n  const getHourChartOption = () => {\r\n    const hours = behaviorData.hourDistribution.map(item => item.hour);\r\n    const counts = behaviorData.hourDistribution.map(item => item.count);\r\n    \r\n    return {\r\n      title: {\r\n        text: '答题时间分布',\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow'\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: hours,\r\n        name: '小时'\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '提交次数'\r\n      },\r\n      series: [\r\n        {\r\n          name: '提交次数',\r\n          type: 'bar',\r\n          data: counts,\r\n          itemStyle: {\r\n            color: '#1890ff'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  // 学习行为图表配置 - 状态分布\r\n  const getStateChartOption = () => {\r\n    return {\r\n      title: {\r\n        text: '答题状态分布',\r\n        left: 'center'\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n      },\r\n      series: [\r\n        {\r\n          name: '答题状态',\r\n          type: 'pie',\r\n          radius: '60%',\r\n          center: ['50%', '50%'],\r\n          data: behaviorData.stateDistribution,\r\n          emphasis: {\r\n            itemStyle: {\r\n              shadowBlur: 10,\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  };\r\n  \r\n  if (loading) {\r\n    return <Spin tip=\"加载中...\" size=\"large\" style={{ display: 'flex', justifyContent: 'center', marginTop: '100px' }} />;\r\n  }\r\n  \r\n  if (error) {\r\n    return <Alert message=\"错误\" description={error} type=\"error\" showIcon />;\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <h2>系统总览</h2>\r\n      \r\n      {/* 统计卡片 */}\r\n      <Row gutter={16}>\r\n        <Col xs={24} sm={12} md={6}>\r\n          <Card className=\"stat-card\">\r\n            <Statistic\r\n              title=\"学生总数\"\r\n              value={stats.totalStudents}\r\n              prefix={<UserOutlined />}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} sm={12} md={6}>\r\n          <Card className=\"stat-card\">\r\n            <Statistic\r\n              title=\"题目总数\"\r\n              value={stats.totalQuestions}\r\n              prefix={<BookOutlined />}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} sm={12} md={6}>\r\n          <Card className=\"stat-card\">\r\n            <Statistic\r\n              title=\"提交总数\"\r\n              value={stats.totalSubmissions}\r\n              prefix={<FileTextOutlined />}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} sm={12} md={6}>\r\n          <Card className=\"stat-card\">\r\n            <Statistic\r\n              title=\"正确率\"\r\n              value={stats.correctRate}\r\n              precision={2}\r\n              formatter={(value) => `${(value * 100).toFixed(2)}%`}\r\n              prefix={<CheckCircleOutlined />}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      \r\n      {/* 图表 */}\r\n      <Row gutter={16}>\r\n        <Col xs={24} md={12}>\r\n          <Card className=\"chart-card\" title=\"知识点掌握度分析\">\r\n            <ReactECharts\r\n              option={getKnowledgeChartOption()}\r\n              style={{ height: '350px', width: '100%' }}\r\n              className=\"chart-container\"\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} md={12}>\r\n          <Card className=\"chart-card\" title=\"答题时间分布\">\r\n            <ReactECharts\r\n              option={getHourChartOption()}\r\n              style={{ height: '350px', width: '100%' }}\r\n              className=\"chart-container\"\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      \r\n      <Row gutter={16}>\r\n        <Col xs={24} md={12}>\r\n          <Card className=\"chart-card\" title=\"答题状态分布\">\r\n            <ReactECharts\r\n              option={getStateChartOption()}\r\n              style={{ height: '350px', width: '100%' }}\r\n              className=\"chart-container\"\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} md={12}>\r\n          <Card className=\"chart-card\" title=\"系统功能导航\">\r\n            <div style={{ padding: '20px', height: '100%' }}>\r\n              <h3>系统功能</h3>\r\n              <ul>\r\n                <li><strong>知识点分析</strong>：分析学习者知识点掌握程度，识别薄弱环节</li>\r\n                <li><strong>学习行为分析</strong>：挖掘个性化学习行为模式，展示学习者画像</li>\r\n                <li><strong>题目难度分析</strong>：识别不合理的题目难度，提供优化建议</li>\r\n                <li><strong>报告生成</strong>：生成包含自然语言和图表的分析报告</li>\r\n                <li><strong>自然语言交互</strong>：通过自然语言查询分析结果</li>\r\n              </ul>\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\DifficultyAnalysis.js",[],"D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\ReportGenerator.js",["51"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, Select, Button, Form, Checkbox, Radio, Spin, Alert, Typography, message, Tabs, Modal, Table, Tag, Tooltip, Space, Divider } from 'antd';\r\nimport { DownloadOutlined, FileTextOutlined, EyeOutlined, HistoryOutlined, SettingOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport ReactECharts from 'echarts-for-react';\r\n\r\nconst { Option } = Select;\r\nconst { Title, Paragraph, Text } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\nconst ReportGenerator = () => {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const [generating, setGenerating] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [students, setStudents] = useState([]);\r\n  const [reportPath, setReportPath] = useState(null);\r\n  const [reportHistory, setReportHistory] = useState([]);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [activeTab, setActiveTab] = useState('generator');\r\n  const [templates, setTemplates] = useState([]);\r\n  \r\n  // 加载初始数据\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // 获取学生数据\r\n        const studentsResponse = await axios.get('/api/students');\r\n        setStudents(studentsResponse.data);\r\n        \r\n        // 获取报告模板数据\r\n        const templatesResponse = await axios.get('/api/report/templates');\r\n        if (templatesResponse.data.status === 'success') {\r\n          setTemplates(templatesResponse.data.templates || []);\r\n        }\r\n        \r\n        // 获取报告历史记录\r\n        const historyResponse = await axios.get('/api/report/history');\r\n        if (historyResponse.data.status === 'success') {\r\n          setReportHistory(historyResponse.data.reports || []);\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('加载初始数据失败:', err);\r\n        setError('加载初始数据失败，请稍后重试');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchInitialData();\r\n  }, []);\r\n  \r\n  // 生成报告\r\n  const generateReport = async (values) => {\r\n    try {\r\n      setGenerating(true);\r\n      setError(null);\r\n      setReportPath(null);\r\n      \r\n      const { reportType, studentId, format, content, templateId, customOptions } = values;\r\n      \r\n      const response = await axios.post('/api/report/generate', {\r\n        report_type: reportType,\r\n        student_id: studentId === 'all' ? null : studentId,\r\n        format: format,\r\n        content: content || [],\r\n        template_id: templateId,\r\n        custom_options: customOptions || {}\r\n      });\r\n      \r\n      if (response.data.status === 'success') {\r\n        setReportPath(response.data.report_path);\r\n        message.success('报告生成成功！');\r\n        \r\n        // 刷新报告历史记录\r\n        const historyResponse = await axios.get('/api/report/history');\r\n        if (historyResponse.data.status === 'success') {\r\n          setReportHistory(historyResponse.data.reports || []);\r\n        }\r\n      } else {\r\n        setError(response.data.message || '生成报告失败');\r\n        message.error('报告生成失败！');\r\n      }\r\n      \r\n      setGenerating(false);\r\n    } catch (err) {\r\n      console.error('生成报告失败:', err);\r\n      setError('生成报告失败，请稍后重试');\r\n      message.error('报告生成失败！');\r\n      setGenerating(false);\r\n    }\r\n  };\r\n  \r\n  // 下载报告\r\n  const downloadReport = (path) => {\r\n    if (!path) return;\r\n    \r\n    const filename = path.split('/').pop();\r\n    window.open(`/api/report/download/${filename}`, '_blank');\r\n  };\r\n  \r\n  // 预览报告\r\n  const previewReport = async (path) => {\r\n    if (!path) return;\r\n    const filename = path.split('/').pop();\r\n    window.open(`/api/report/preview/${filename}`, '_blank');\r\n  };\r\n  \r\n  // 删除报告\r\n  const deleteReport = async (reportId) => {\r\n    try {\r\n      const response = await axios.delete(`/api/report/${reportId}`);\r\n      \r\n      if (response.data.status === 'success') {\r\n        message.success('报告删除成功！');\r\n        \r\n        // 刷新报告历史记录\r\n        const historyResponse = await axios.get('/api/report/history');\r\n        if (historyResponse.data.status === 'success') {\r\n          setReportHistory(historyResponse.data.reports || []);\r\n        }\r\n      } else {\r\n        message.error('删除报告失败！');\r\n      }\r\n    } catch (err) {\r\n      console.error('删除报告失败:', err);\r\n      message.error('删除报告失败，请稍后重试');\r\n    }\r\n  };\r\n  \r\n  // 生成预览图表\r\n  const getPreviewChartOption = (chartData) => {\r\n    if (!chartData || !chartData.type) return {};\r\n    \r\n    switch (chartData.type) {\r\n      case 'pie':\r\n        return {\r\n          title: {\r\n            text: chartData.title || '图表预览',\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n          },\r\n          series: [\r\n            {\r\n              name: chartData.seriesName || '数据',\r\n              type: 'pie',\r\n              radius: '60%',\r\n              center: ['50%', '50%'],\r\n              data: chartData.data || [],\r\n              emphasis: {\r\n                itemStyle: {\r\n                  shadowBlur: 10,\r\n                  shadowOffsetX: 0,\r\n                  shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        };\r\n      case 'bar':\r\n        return {\r\n          title: {\r\n            text: chartData.title || '图表预览',\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis',\r\n            axisPointer: {\r\n              type: 'shadow'\r\n            }\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: chartData.xAxisData || []\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          series: [\r\n            {\r\n              name: chartData.seriesName || '数据',\r\n              type: 'bar',\r\n              data: chartData.data || [],\r\n              itemStyle: {\r\n                color: '#1890ff'\r\n              }\r\n            }\r\n          ]\r\n        };\r\n      case 'line':\r\n        return {\r\n          title: {\r\n            text: chartData.title || '图表预览',\r\n            left: 'center'\r\n          },\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: chartData.xAxisData || []\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          series: [\r\n            {\r\n              name: chartData.seriesName || '数据',\r\n              type: 'line',\r\n              data: chartData.data || [],\r\n              itemStyle: {\r\n                color: '#1890ff'\r\n              }\r\n            }\r\n          ]\r\n        };\r\n      default:\r\n        return {};\r\n    }\r\n  };\r\n  \r\n  // 报告历史记录表格列定义\r\n  const historyColumns = [\r\n    {\r\n      title: '报告名称',\r\n      dataIndex: 'report_name',\r\n      key: 'report_name',\r\n      ellipsis: true,\r\n      render: (text, record) => (\r\n        <Tooltip title={text}>\r\n          <span>{text}</span>\r\n        </Tooltip>\r\n      )\r\n    },\r\n    {\r\n      title: '报告类型',\r\n      dataIndex: 'report_type',\r\n      key: 'report_type',\r\n      render: (text) => {\r\n        const typeMap = {\r\n          'general': '综合分析报告',\r\n          'knowledge': '知识点掌握报告',\r\n          'behavior': '学习行为报告',\r\n          'difficulty': '题目难度报告'\r\n        };\r\n        return typeMap[text] || text;\r\n      }\r\n    },\r\n    {\r\n      title: '学生',\r\n      dataIndex: 'student_id',\r\n      key: 'student_id',\r\n      render: (text) => text || '所有学生'\r\n    },\r\n    {\r\n      title: '格式',\r\n      dataIndex: 'format',\r\n      key: 'format',\r\n      render: (text) => (\r\n        <Tag color=\"blue\">{text.toUpperCase()}</Tag>\r\n      )\r\n    },\r\n    {\r\n      title: '生成时间',\r\n      dataIndex: 'created_at',\r\n      key: 'created_at',\r\n      sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\r\n    },\r\n    {\r\n      title: '操作',\r\n      key: 'action',\r\n      render: (_, record) => (\r\n        <Space size=\"middle\">\r\n          <Button \r\n            type=\"link\" \r\n            icon={<EyeOutlined />} \r\n            onClick={() => previewReport(record.report_path)}\r\n          >\r\n            预览\r\n          </Button>\r\n          <Button \r\n            type=\"link\" \r\n            icon={<DownloadOutlined />} \r\n            onClick={() => downloadReport(record.report_path)}\r\n          >\r\n            下载\r\n          </Button>\r\n          <Button \r\n            type=\"link\" \r\n            danger \r\n            icon={<DeleteOutlined />} \r\n            onClick={() => deleteReport(record.id)}\r\n          >\r\n            删除\r\n          </Button>\r\n        </Space>\r\n      )\r\n    }\r\n  ];\r\n  \r\n  return (\r\n    <div>\r\n      <Title level={2}>报告生成</Title>\r\n      <Paragraph>\r\n        本模块可生成包含自然语言和图表元素的分析报告，支持通过交互式操作指定报告的格式、内容和范围。\r\n      </Paragraph>\r\n      \r\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\r\n        <TabPane \r\n          tab={<span><FileTextOutlined />报告生成器</span>} \r\n          key=\"generator\"\r\n        >\r\n          <Card>\r\n            <Form\r\n              form={form}\r\n              layout=\"vertical\"\r\n              onFinish={generateReport}\r\n              initialValues={{\r\n                reportType: 'general',\r\n                format: 'pdf',\r\n                content: ['knowledge', 'behavior', 'difficulty'],\r\n                templateId: templates.length > 0 ? templates[0].id : undefined\r\n              }}\r\n            >\r\n              <Row gutter={16}>\r\n                <Col xs={24} md={12}>\r\n                  <Form.Item\r\n                    name=\"reportType\"\r\n                    label=\"报告类型\"\r\n                    rules={[{ required: true, message: '请选择报告类型' }]}\r\n                  >\r\n                    <Radio.Group>\r\n                      <Radio value=\"general\">综合分析报告</Radio>\r\n                      <Radio value=\"knowledge\">知识点掌握报告</Radio>\r\n                      <Radio value=\"behavior\">学习行为报告</Radio>\r\n                      <Radio value=\"difficulty\">题目难度报告</Radio>\r\n                    </Radio.Group>\r\n                  </Form.Item>\r\n                </Col>\r\n                \r\n                <Col xs={24} md={12}>\r\n                  <Form.Item\r\n                    name=\"studentId\"\r\n                    label=\"学生\"\r\n                    rules={[{ required: true, message: '请选择学生' }]}\r\n                    initialValue=\"all\"\r\n                  >\r\n                    <Select placeholder=\"选择学生\" loading={loading}>\r\n                      <Option value=\"all\">所有学生</Option>\r\n                      {students.map(student => (\r\n                        <Option key={student.student_ID} value={student.student_ID}>\r\n                          {student.student_ID} {student.sex ? `(${student.sex})` : ''}\r\n                        </Option>\r\n                      ))}\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              \r\n              <Row gutter={16}>\r\n                <Col xs={24} md={12}>\r\n                  <Form.Item\r\n                    name=\"format\"\r\n                    label=\"报告格式\"\r\n                    rules={[{ required: true, message: '请选择报告格式' }]}\r\n                  >\r\n                    <Radio.Group>\r\n                      <Radio value=\"pdf\">PDF</Radio>\r\n                      <Radio value=\"html\">HTML</Radio>\r\n                      <Radio value=\"docx\">Word</Radio>\r\n                      <Radio value=\"xlsx\">Excel</Radio>\r\n                    </Radio.Group>\r\n                  </Form.Item>\r\n                </Col>\r\n                \r\n                <Col xs={24} md={12}>\r\n                  <Form.Item\r\n                    name=\"templateId\"\r\n                    label=\"报告模板\"\r\n                    rules={[{ required: true, message: '请选择报告模板' }]}\r\n                  >\r\n                    <Select placeholder=\"选择模板\" loading={loading}>\r\n                      {templates.map(template => (\r\n                        <Option key={template.id} value={template.id}>\r\n                          {template.name}\r\n                        </Option>\r\n                      ))}\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              \r\n              <Divider orientation=\"left\">报告内容</Divider>\r\n              \r\n              <Row gutter={16}>\r\n                <Col span={24}>\r\n                  <Form.Item\r\n                    name=\"content\"\r\n                    label=\"分析内容\"\r\n                  >\r\n                    <Checkbox.Group style={{ width: '100%' }}>\r\n                      <Row gutter={[16, 16]}>\r\n                        <Col span={8}>\r\n                          <Card size=\"small\" hoverable>\r\n                            <Checkbox value=\"knowledge\">知识点分析</Checkbox>\r\n                            <div style={{ marginTop: 8, marginLeft: 24 }}>\r\n                              <Text type=\"secondary\">包含知识点掌握度、薄弱点等分析</Text>\r\n                            </div>\r\n                          </Card>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                          <Card size=\"small\" hoverable>\r\n                            <Checkbox value=\"behavior\">行为分析</Checkbox>\r\n                            <div style={{ marginTop: 8, marginLeft: 24 }}>\r\n                              <Text type=\"secondary\">包含学习行为、答题习惯等分析</Text>\r\n                            </div>\r\n                          </Card>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                          <Card size=\"small\" hoverable>\r\n                            <Checkbox value=\"difficulty\">难度分析</Checkbox>\r\n                            <div style={{ marginTop: 8, marginLeft: 24 }}>\r\n                              <Text type=\"secondary\">包含题目难度、不合理题目等分析</Text>\r\n                            </div>\r\n                          </Card>\r\n                        </Col>\r\n                      </Row>\r\n                    </Checkbox.Group>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n              \r\n              <Form.Item>\r\n                <Space>\r\n                  <Button type=\"primary\" htmlType=\"submit\" loading={generating}>\r\n                    生成报告\r\n                  </Button>\r\n                  <Button \r\n                    icon={<SettingOutlined />}\r\n                    onClick={() => message.info('高级设置功能即将上线')}\r\n                  >\r\n                    高级设置\r\n                  </Button>\r\n                </Space>\r\n              </Form.Item>\r\n            </Form>\r\n            \r\n            {error && <Alert message=\"错误\" description={error} type=\"error\" showIcon style={{ marginTop: 16 }} />}\r\n            \r\n            {reportPath && (\r\n              <Card style={{ marginTop: 16, textAlign: 'center' }}>\r\n                <FileTextOutlined style={{ fontSize: 48, color: '#1890ff', marginBottom: 16 }} />\r\n                <Title level={4}>报告已生成</Title>\r\n                <Space style={{ marginTop: 16 }}>\r\n                  <Button \r\n                    type=\"primary\" \r\n                    icon={<DownloadOutlined />} \r\n                    onClick={() => downloadReport(reportPath)}\r\n                  >\r\n                    下载报告\r\n                  </Button>\r\n                  <Button \r\n                    icon={<EyeOutlined />} \r\n                    onClick={() => previewReport(reportPath)}\r\n                  >\r\n                    预览报告\r\n                  </Button>\r\n                </Space>\r\n              </Card>\r\n            )}\r\n          </Card>\r\n        </TabPane>\r\n        \r\n        <TabPane \r\n          tab={<span><HistoryOutlined />报告历史</span>} \r\n          key=\"history\"\r\n        >\r\n          <Card>\r\n            <Table \r\n              columns={historyColumns} \r\n              dataSource={reportHistory} \r\n              rowKey=\"id\" \r\n              loading={loading}\r\n              pagination={{ pageSize: 10 }}\r\n            />\r\n          </Card>\r\n        </TabPane>\r\n      </Tabs>\r\n      \r\n      {/* 报告预览模态框 */}\r\n      <Modal\r\n        title=\"报告预览\"\r\n        visible={previewVisible}\r\n        onCancel={() => setPreviewVisible(false)}\r\n        width={800}\r\n        footer={[\r\n          <Button key=\"close\" onClick={() => setPreviewVisible(false)}>\r\n            关闭\r\n          </Button>,\r\n          <Button \r\n            key=\"download\" \r\n            type=\"primary\" \r\n            icon={<DownloadOutlined />} \r\n            onClick={() => {\r\n              downloadReport(previewData?.report_path);\r\n              setPreviewVisible(false);\r\n            }}\r\n          >\r\n            下载报告\r\n          </Button>\r\n        ]}\r\n      >\r\n        {previewData ? (\r\n          <div>\r\n            <Title level={3} style={{ textAlign: 'center' }}>{previewData.title}</Title>\r\n            \r\n            {previewData.sections?.map((section, index) => (\r\n              <div key={index} style={{ marginBottom: 24 }}>\r\n                <Title level={4}>{section.title}</Title>\r\n                <Paragraph>{section.content}</Paragraph>\r\n                \r\n                {section.charts?.map((chart, chartIndex) => (\r\n                  <div key={chartIndex} style={{ marginTop: 16, marginBottom: 16 }}>\r\n                    <ReactECharts \r\n                      option={getPreviewChartOption(chart)} \r\n                      style={{ height: 300 }} \r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <Spin tip=\"加载预览数据...\" />\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportGenerator;","D:\\Vscode\\Project\\VisualAnalytics\\EduAssistSys\\frontend\\src\\pages\\NLPInteraction.js",["52","53"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Input, Button, Card, List, Typography, Spin, message, Divider, Select } from 'antd';\r\nimport { SendOutlined, RobotOutlined, UserOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nconst { TextArea } = Input;\r\nconst { Title, Paragraph, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nexport default function NLPInteraction() {\r\n  const [query, setQuery] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [modelType, setModelType] = useState('backend'); // 'backend' 或 'deepseek'\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // 自动滚动到最新消息\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // 添加欢迎消息\r\n  useEffect(() => {\r\n    setMessages([\r\n      {\r\n        type: 'system',\r\n        content: '欢迎使用教育辅助可视分析系统的自然语言交互功能。您可以询问关于知识点掌握情况、学习行为模式和题目难度的问题，也可以请求生成分析报告。'\r\n      }\r\n    ]);\r\n  }, []);\r\n\r\n  // 处理查询提交\r\n  const handleSubmit = async () => {\r\n    if (!query.trim()) return;\r\n\r\n    // 添加用户消息\r\n    const userMessage = { type: 'user', content: query };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    \r\n    // 清空输入框\r\n    setQuery('');\r\n    \r\n    // 设置加载状态\r\n    setLoading(true);\r\n    \r\n    try {\r\n      let response;\r\n      \r\n      if (modelType === 'backend') {\r\n        // 使用后端NLP服务\r\n        response = await axios.post('/api/nlp/query', { query });\r\n        \r\n        // 添加系统回复\r\n        const systemMessage = { \r\n          type: 'system', \r\n          content: response.data.content || '抱歉，我无法理解您的问题。',\r\n          data: response.data\r\n        };\r\n        \r\n        setMessages(prev => [...prev, systemMessage]);\r\n      } else {\r\n        // 使用本地Deepseek模型\r\n        const deepseekResponse = await callDeepseekModel(query);\r\n        \r\n        // 添加系统回复\r\n        const systemMessage = { \r\n          type: 'system', \r\n          content: deepseekResponse,\r\n          model: 'deepseek'\r\n        };\r\n        \r\n        setMessages(prev => [...prev, systemMessage]);\r\n      }\r\n    } catch (error) {\r\n      console.error('查询处理失败:', error);\r\n      message.error('查询处理失败，请稍后重试');\r\n      \r\n      // 添加错误消息\r\n      const errorMessage = { \r\n        type: 'system', \r\n        content: '抱歉，处理您的请求时出现了错误。请稍后重试。',\r\n        error: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 调用本地Deepseek模型\r\n  const callDeepseekModel = async (prompt) => {\r\n    try {\r\n      const url = \"http://localhost:11434/api/generate\";\r\n      \r\n      const data = {\r\n        model: \"deepseek-r1:8b\",\r\n        prompt: prompt,\r\n        stream: false,\r\n      };\r\n      \r\n      const response = await axios.post(url, data);\r\n      \r\n      if (response.status === 200) {\r\n        return response.data.response;\r\n      } else {\r\n        throw new Error(`请求失败，状态码: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Deepseek模型调用失败:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 渲染消息内容\r\n  const renderMessageContent = (message) => {\r\n    if (message.type === 'system' && message.data && message.data.type === 'report') {\r\n      // 渲染报告链接\r\n      return (\r\n        <div>\r\n          <Paragraph>{message.content}</Paragraph>\r\n          <Button type=\"primary\" href={`/api/report/download/${message.data.report_path.split('/').pop()}`} target=\"_blank\">\r\n            下载报告\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    // 普通文本消息\r\n    return <Paragraph>{message.content}</Paragraph>;\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: '1000px', margin: '0 auto' }}>\r\n      <Card\r\n        title={\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Title level={4}>自然语言交互</Title>\r\n            <Select \r\n              value={modelType} \r\n              onChange={setModelType} \r\n              style={{ width: 200 }}\r\n            >\r\n              <Option value=\"backend\">后端NLP服务</Option>\r\n              <Option value=\"deepseek\">本地Deepseek模型</Option>\r\n            </Select>\r\n          </div>\r\n        }\r\n        style={{ marginBottom: 20 }}\r\n      >\r\n        <Paragraph>\r\n          您可以使用自然语言向系统提问，获取关于学生学习情况的分析结果。\r\n          例如：\r\n        </Paragraph>\r\n        <ul>\r\n          <li>\"分析学生ID:12345的知识点掌握情况\"</li>\r\n          <li>\"查看学生的学习行为模式\"</li>\r\n          <li>\"生成一份PDF格式的知识点掌握报告\"</li>\r\n        </ul>\r\n      </Card>\r\n      \r\n      <Card\r\n        style={{ \r\n          height: '500px', \r\n          marginBottom: 20, \r\n          display: 'flex', \r\n          flexDirection: 'column' \r\n        }}\r\n        bodyStyle={{ \r\n          flex: 1, \r\n          overflow: 'auto', \r\n          padding: '12px 24px',\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        }}\r\n      >\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          dataSource={messages}\r\n          style={{ flex: 1 }}\r\n          renderItem={(message) => (\r\n            <List.Item style={{ padding: '8px 0' }}>\r\n              <List.Item.Meta\r\n                avatar={\r\n                  message.type === 'user' ? \r\n                  <UserOutlined style={{ fontSize: '24px', color: '#1890ff' }} /> : \r\n                  <RobotOutlined style={{ fontSize: '24px', color: '#52c41a' }} />\r\n                }\r\n                title={message.type === 'user' ? '您' : '系统'}\r\n                description={renderMessageContent(message)}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        />\r\n        <div ref={messagesEndRef} />\r\n        \r\n        {loading && (\r\n          <div style={{ textAlign: 'center', padding: '20px 0' }}>\r\n            <Spin tip=\"正在处理您的请求...\" />\r\n          </div>\r\n        )}\r\n      </Card>\r\n      \r\n      <div style={{ display: 'flex' }}>\r\n        <TextArea\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder=\"请输入您的问题...\"\r\n          autoSize={{ minRows: 2, maxRows: 6 }}\r\n          onPressEnter={(e) => {\r\n            if (!e.shiftKey) {\r\n              e.preventDefault();\r\n              handleSubmit();\r\n            }\r\n          }}\r\n          style={{ flex: 1, marginRight: 8 }}\r\n        />\r\n        <Button \r\n          type=\"primary\" \r\n          icon={<SendOutlined />} \r\n          onClick={handleSubmit}\r\n          loading={loading}\r\n          style={{ height: 'auto' }}\r\n        >\r\n          发送\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":42,"nodeType":"60","messageId":"61","endLine":2,"endColumn":47},{"ruleId":"62","severity":1,"message":"63","line":77,"column":116,"nodeType":"64","messageId":"65","endLine":77,"endColumn":130},{"ruleId":"58","severity":1,"message":"66","line":20,"column":23,"nodeType":"60","messageId":"61","endLine":20,"endColumn":37},{"ruleId":"58","severity":1,"message":"67","line":2,"column":64,"nodeType":"60","messageId":"61","endLine":2,"endColumn":71},{"ruleId":"58","severity":1,"message":"68","line":7,"column":27,"nodeType":"60","messageId":"61","endLine":7,"endColumn":31},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","unexpected","'setPreviewData' is assigned a value but never used.","'Divider' is defined but never used.","'Text' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]